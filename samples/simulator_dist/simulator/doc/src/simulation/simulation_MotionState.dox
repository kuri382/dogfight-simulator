namespace asrc{
    namespace core{
/**

\page page_simulation_MotionState 運動状態の表現方法(MotionState)

本シミュレータにおいて、 [PhysicalAsset](\ref section_simulation_entity_PhysicalAsset)の
一般的な運動状態は MotionState クラスにより表現するものとし、
ある[座標系](\ref page_simulation_Coordinate)における
位置、速度、姿勢、角速度及び時刻の情報を保持するものとして扱う。
また、姿勢に関する追加情報として、方位角、仰角、高度の情報と、
方位角をそのままに x-y 平面を水平面と一致させた座標系(局所水平座標系)の情報を付加するものとする。

# MotionState クラスのjson表現 {#section_simulation_MotionState_MotionState_json}

key             |value                                                               |load時の省略可否
----------------|--------------------------------------------------------------------|----------------
crs             |[座標系のjson表現](\ref section_simulation_Entity_as_reference_json)|不可
time            |[Timeのjson表現](\ref section_simulation_TimeSystem_Time_json)      |不可
pos             |位置の座標値 (array)                                                |不可
vel             |速度の座標値 (array)                                                |不可
omega           |角速度の座標値 (array)                                              |不可
q               |姿勢クォータニオンの値 実部→虚部の順 (array)                       |不可
axisOrder       |Body座標系の軸順                                                    |可(省略時はFSD)
az              |方位角の値(真北を0として東側を正)                                   |可(省略時は自動計算)
el              |仰角の値(上向きを正)                                                |可(省略時は自動計算)
alt             |楕円体高度                                                          |可(省略時は自動計算)
qToFSDFromNED   |B座標系(FSD)からH座標系(NED)への変換クォータニオン                  |可(省略時は自動計算)

# 時刻の外挿 {#section_simulation_MotionState_extrapolation}

MotionState は生成時刻の情報を保持しているため、
指定した時間 dt だけ外挿する[extrapolate(dt)](\ref MotionState::extrapolate(const double&) const)と、
指定した時刻 dstTime まで外挿する[extrapolate(dstTime)](\ref MotionState::extrapolateTo(const Time&) const)
の2種類のメンバ関数によって状態量を外挿することができる。
なお、これらはin-placeな演算ではなく新たな MotionState インスタンスを返す。

# 座標変換 {#section_simulation_MotionState_transformation}

## 個別の状態量の座標変換 {#section_simulation_MotionState_state_transformation}

位置や速度等の座標は[Coordinate](\ref section_simulation_Coordinate_Coordinate)として保持している。
そのため、例えば以下のように、
[operator(crs)](\ref Coordinate::operator()(const std::shared_ptr<CoordinateReferenceSystem>&) const)によって
特定の座標系での値に容易に変換することができる。

```cpp
std::shared_ptr<CoordinateReferenceSystem> crs=manager->getRootCRS(); // 変換先の座標系
MotionState m; // 運動状態
Eigen::Vector3d p=m.pos(crs); // crsにおける座標ベクトルとして取得
Eigen::Vector3d p=m.pos(); // 引数を省略した場合はmが元々保持していた座標系における座標ベクトルとして取得
```
```python
crs=self.manager.getRootCRS() # 変換先の座標系
m=MotionState() # 運動状態
p=m.pos(crs) # crsにおける座標ベクトルをnp.ndarrayとして取得
p=m.pos() # 引数を省略した場合はmが元々保持していた座標系における座標ベクトルとして取得
```

## MotionStateオブジェクト全体の座標変換 {#section_simulation_MotionState_entire_transformation}

[transformTo(crs)](\ref MotionState::transformTo)や[setCRS(crs,bool)](\ref MotionState::setCRS)を用いることで
MotionState オブジェクト全体を特定の座標系crsに座標変換することが可能である。

```cpp
std::shared_ptr<CoordinateReferenceSystem> crs=manager->getRootCRS(); // 変換先の座標系
MotionState m; // 運動状態

MotionState m2=m.transformTo(crs); // crsにおける新たなMotionStateとして取得

m.setCRS(crs,true); // crsにおけるMotionStateにin-placeで変換

m.setCRS(crs,false); // 座標変換をせずに座標系をcrsにin-placeで変更
```
```python
crs=self.manager.getRootCRS() # 変換先の座標系
m=MotionState() # 運動状態

m2=m.transformTo(crs) # crsにおける新たなMotionStateとして取得

m.setCRS(crs,True) # crsにおけるMotionStateにin-placeで変換

m.setCRS(crs,False) # 座標変換をせずに座標系をcrsにin-placeで変更
```

## [PhysicalAsset](\ref section_simulation_entity_PhysicalAsset)に固定された座標系([AffineCRS](\ref section_simulation_Coordinate_AffineCRS))としての座標変換 {#section_simulation_MotionState_transformation_as_AffineCRS}

MotionState は [PhysicalAsset](\ref section_simulation_entity_PhysicalAsset)
に固定された座標系([AffineCRS](\ref section_simulation_Coordinate_AffineCRS))としても振る舞う。

xxxYtoZという形式の多数のメンバ関数により、
自身に関連する複数の座標系間で、座標種別に応じた三次元ベクトル値の直接変換を行うことができるようになっている。
ここで、xxxは座標種別を表し、Yは変換元の座標系、Zは変換先の座標系を表す。

第1引数valueはY座標系において座標値を表すベクトル、第2引数locationはY座標系においてその座標値が観測された絶対位置、
第3引数以降は座標系を特定するための追加引数でありYとZの指定によって異なる。
なお、第2引数を省略した関数オーバーロードも提供されており、その場合はlocationをゼロベクトルとみなして変換を行う。

```cpp
Eigen::Vector3d ret=m.xxxYtoZ(value,location,...);
```

### 座標種別 xxx の選択肢

xxx   | 概要
------|------------------------
abs   | 絶対位置として変換する
rel   | 相対位置として変換する
dir   | 方向として変換する
vel   | 速度として変換する
omega | 角速度として変換する

### 座標系 Y,Z の選択肢

- B

    Body の略で、自身の位置を原点とし、自身の姿勢に紐付いた座標軸を持つ座標系である。
    追加引数はない。

- P

    Parentの略で、自身の親となる座標系(メンバ変数crsと同じ)である。
    基本的には SimulationManager の rootCRS となるが、異なるCRSを用いてもよい。
    追加引数はない。

- H

    Horizontalの略で、自身の鉛直下方の楕円体表面上の点を原点とする局所水平座標系である。
    追加引数は以下の二つである。
    - const std::string& dstAxisOrder="FSD"

        局所水平座標系の[座標軸順](\ref section_simulation_Coordinate_axis_order)を表す文字列。
        省略時はFSD(自身の前方が+x軸、右方が+y軸、下方が+z軸)となる。

    - bool onSurface=false

        局所水平座標系の原点を地表面(楕円体表面)上にとるかどうか。
        省略時はfalse(自身のいる高度が原点)となる。

- A

    Anotherの略で、引数として与えられる任意の座標系である。
    追加引数は以下のとおり。
    - const std::shared_ptr< CoordinateReferenceSystem >& another

        任意の CoordinateReferenceSystem インスタンス。


*/
    }
}