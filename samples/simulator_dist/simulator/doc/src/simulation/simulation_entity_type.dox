namespace asrc{
    namespace core{
/**

\page page_simulation_entity_type シミュレーション登場物の種類について

# クラス、モデル、ポリシーの考え方 {#section_class_model_policy}
本シミュレータにおいて、登場物のクラスとモデルを以下のように使い分ける。
- クラス…プログラム上で実装されたクラスそのもの（例：レーダクラス、誘導弾クラス）
- モデル…あるクラスに対して、特定のパラメータセットを紐付けたもの（例：50km見えるレーダ、100km見えるレーダ）

また、本シミュレータは強化学習用の環境として用いることを念頭に置いて作成されているため、
gymnasium.Envのインターフェースを介してシミュレータからObservationを取得してシミュレータにActionを返すオブジェクトをシミュレータ外部に置くことができる。
この外部に存在するオブジェクトのことを、本シミュレータでは「ポリシー」と呼ぶ。
ポリシーの例として、ニューラルネットワークやbehavior treeなどが挙げられる。

# 登場物の基底クラス「Entity」{#section_simulation_entity_Entity}

本シミュレータの登場物は原則として、Entityクラスの派生クラスとして表現される。
Entity インスタンスの生成及び初期化に関する説明は[こちら](\ref page_simulation_entity_creation)を参照されたい。

Entity はその役割に応じて以下のように派生クラスが分岐する。

@image html "entity_group.png" "シミュレーション登場物の分類" width=80%

## Asset {#section_simulation_entity_Asset}
　 Asset は、観測([perceive](\ref Asset::perceive))、制御([control](\ref Asset::control))、行動([behave](\ref Asset::behave))の 3 種類の処理をそれぞれ指定された周期で実行することで環境に作用する。
また、各 Asset の処理の中には他の Asset の処理結果に依存するものがあるため、同時刻に処理を行うこととなった際の処理優先度を
[setDependency](\ref Asset::setDependency)関数によって指定することができる。

　 Assetは自身の生存状態を返す関数[isAlive](\ref Asset::isAlive)と、生存状態を false にするための関数[kill](\ref Asset::kill)を持つ。
生存中のみ前述の3種類の処理が実行され、一度生存状態がfalseとなった Asset はそのエピソード中に復活することはない。
ただし、インスタンスとしてはエピソードの終了まで削除せずに維持しており、
例えば[Callback](\ref section_simulation_entity_Callback)等から特定の処理のために変数を参照することができるようにしている。

　また、各 Asset は共通のメンバ変数として、「他者が観測してよい自身の情報」である[observables](\ref Asset::observables)と、
「自身の行動を制御するための情報」である[commands](\ref Asset::commands)をnl::json型変数として持ち、他の Asset が具体的にどのようなクラスであるかを
気にせずに相互作用を及ぼすインターフェースとして用いることができる。
ただし、他の Asset との相互作用を必ずしもこれらの変数を介して行わなければならないものではなく、
各クラスの定義次第では直接互いのメンバ変数や関数を参照することも許容される。

　 Asset は大きく PhysicalAsset 、 Controller 、 Agent の3種類のサブクラスに分類され、それぞれの概要は以下の通りである。

### PhysicalAsset {#section_simulation_entity_PhysicalAsset}
　 PhysicalAsset は Asset のうち物理的実体を持つものを表すクラスであり、独立した Asset として生成されるものと、
他の PhysicalAsset に従属してその「子」として生成されるものとする。

　自身の位置や速度、姿勢といった運動に関する状態量[MotionState](\ref page_simulation_MotionState)を持つほか、従属関係にあるものについてはその運動が
「親」に束縛されているか否かを指定することができる。また、自らの「子」となる PhysicalAsset と Controller を生成することができる。

### Controller {#section_simulation_entity_Controller}
　 Controller は Asset のうち物理的実体を持たないものを表すクラスであり、一つの PhysicalAsset に従属してその「子」として生成されるものである。
PhysicalAsset の複雑な制御を実現するために用いることを想定しているが、[control](\ref Asset::control) だけでなく、
必要に応じて [perceive](\ref Asset::perceive) と [behave](\ref Asset::behave) で処理を行うことも許容される。

　また、自らの「子」となる Controller を生成することができる。

### Agent {#section_simulation_entity_Agent}
　 Agent は Controller と同様に物理的実体を持たないものであり、一つ以上の PhysicalAsset に従属してその「子」として生成されるものとする。
Controller との最大の違いは、強化学習の対象として[ポリシー](\ref section_class_model_policy)と対になって存在し、一定周期でシミュレータの外部に Observation を供給し、
外部のポリシーから Action を受け取る役割を持っていることと、「親」である PhysicalAsset の実体にはアクセスできず、前述の [observables](\ref Asset::observables) と
[commands](\ref Asset::commands) を介して作用することしか認められていないことである。

　 Agent は親 Asset の [observables](\ref Asset::observables) を読み取って Observation を生成する [makeObs](\ref Agent::makeObs) 関数と、
Action を引数として受け取り自身のメンバ変数 [commands](\ref Asset::commands) を更新する [deploy](\ref Agent::deploy) 関数を持っており、
親 Asset は Agent の [commands](\ref Asset::commands) を参照して自身の動作を決定する。また、 Agent は [perceive](\ref Asset::perceive)、[control](\ref Asset::control)、[behave](\ref Asset::behave) の処理も行えるため、
これらを活用して Observation、Action の変換のために様々な中間処理を行うことも許容される。

## Callback {#section_simulation_entity_Callback}
　 Callback は、シミュレーション中に周期的に呼び出される処理を記述してシミュレーションの流れを制御するクラスであり、次の 11 種類のタイミングで対応するメンバ関数が呼び出される。

-# [onEpisodeBegin](\ref Callback::onEpisodeBegin)…各エピソードの開始時(＝reset 関数の最後)
-# [onValidationEnd](\ref Callback::onValidationEnd)…各エピソードの[validate](\ref Entity::validate)終了時
-# [onDeployAction](\ref Callback::onDeployAction)…[step](\ref SimulationManager::step)関数の開始時に、外部から与えられた Action を各 Agent に配分する前
-# [onStepBegin](\ref Callback::onStepBegin)…[step](\ref SimulationManager::step)関数の開始時に、外部から与えられた Action を Agent が受け取った直後
-# [onInnerStepBegin](\ref Callback::onInnerStepBegin)…各 tick の開始時(＝ Asset の [control](\ref Asset::control) の前)
-# [onInnerStepEnd](\ref Callback::onInnerStepEnd)…各 tick の終了時(＝ Asset の [perceive](\ref Asset::perceive) の後)
-# [onStepEnd](\ref Callback::onStepEnd)…[step](\ref SimulationManager::step)関数の終了時（＝[step](\ref SimulationManager::step)関数の戻り値生成の前または後）
-# [onMakeObs](\ref Callback::onMakeObs)…[step](\ref SimulationManager::step)関数の戻り値として Observation を生成する直前
-# [onEpisodeEnd](\ref Callback::onEpisodeEnd)…各エピソードの終了時([step](\ref SimulationManager::step)関数の戻り値生成後)
-# [onGetObservationSpace](\ref Callback::onGetObservationSpace)…[get_observation_space](\ref SimulationManager::get_observation_space)において戻り値を返す直前
-# [onGetActionSpace](\ref Callback::onGetActionSpace)…[get_action_space](\ref SimulationManager::get_action_space) において戻り値を返す直前

　 Callback は大きく Ruler 、 Reward 、 Viewer 、その他の 4 種類に分けられ、それぞれの概要は以下の通りである。

### Ruler {#section_simulation_entity_Ruler}
　 Ruler は、エピソードの終了判定の実施と各陣営の得点の計算を主な役割としている、
名前の通りシミュレーションのルールを定義するクラスである。
そのため、単一のエピソード中に存在できる Ruler インスタンスは一つのみに限られる。
また、Ruler は Asset と同様に「観測してよい情報」である[observables](\ref Ruler::observables) を
nl::json 型変数として持っており、Agent クラスからは得点以外には[observables](\ref Ruler::observables)にしか
アクセスできないようになっている。

### Reward {#section_simulation_entity_Reward}
　 Reward は、エピソードにおける各 Agent の報酬の計算を行うためのクラスであり、Ruler と異なり、
単一のエピソード中に複数存在させることができる。　Reward は陣営単位の報酬を計算するものと
Agent 単位の報酬を計算するもの 2 種類に分類でき、生成時に計算対象とする陣営や Agent の名称を
与えることで個別に報酬関数をカスタマイズできる。

### Viewer {#section_simulation_entity_Viewer}
　 Viewer は、エピソードの可視化を行うためのクラスである。Viewer は Ruler と同様、
単一のエピソード中にただ一つのインスタンスのみ存在できる。

### その他のCallback {#section_simulation_entity_OtherCallback}
　その他の Callback は特別な共通サブクラスはなく、Callback クラスを直接継承してよい。
例えば、ログの出力や、次のエピソードのコンフィグの書き換えを行うために用いることができる。
更には、前述の Ruler や Reward の処理結果や Asset の状態量を強引に改変したり、Agent から本来はアクセス
出来ない情報を Agent に伝達したりすることも可能な作りとなっており、かなり広い範囲にわたって
シミュレーションの挙動に干渉することができるものとしている。

　また、その他に該当する Callback のうち、ログ出力に該当するものを Logger として通常の
Callback とは明示的に分けて生成する。これは Logger が Viewer の可視化結果を参照できるようにするためであり、
シミュレーション中は Logger 以外→ Viewer → Logger の順で処理される。

*/
    }
}