#Copyright (c) 2021-2025 Air Systems Research Center, Acquisition, Technology & Logistics Agency(ATLA)



# ==============================================
# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.5)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6...3.19)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
foreach(_expectedTarget ASRCAISim1)
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  unset(_targetsDefined)
  unset(_targetsNotDefined)
  unset(_expectedTargets)
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)
# ==============================================


get_filename_component(PACKAGE_PREFIX_DIR "${CMAKE_CURRENT_LIST_DIR}/../../" ABSOLUTE)
set(ASRCAISim1_INCLUDE_DIR "${PACKAGE_PREFIX_DIR}/include")
set(ASRCAISim1_INCLUDE_DIRS ${ASRCAISim1_INCLUDE_DIR} "${PACKAGE_PREFIX_DIR}/thirdParty/include")
set(ASRCAISim1_LIBRARY_DIR "${PACKAGE_PREFIX_DIR}/core")
set(ASRCAISim1_LIBRARY_DIRS ${ASRCAISim1_LIBRARY_DIR} "${PACKAGE_PREFIX_DIR}/thirdParty/lib")
find_library(ASRCAISim1_LIBRARY
  NAMES
    Core
  PATHS
    ${PACKAGE_PREFIX_DIR}/core
  NO_DEFAULT_PATH
)
add_library(ASRCAISim1::Core SHARED IMPORTED)
set_target_properties(ASRCAISim1::Core PROPERTIES
  IMPORTED_LOCATION "${ASRCAISim1_LIBRARY}"
  INTERFACE_INCLUDE_DIRECTORIES "${ASRCAISim1_INCLUDE_DIRS}"
)
if(WIN32)
  set_target_properties(ASRCAISim1::Core PROPERTIES
    IMPORTED_IMPLIB "${ASRCAISim1_LIBRARY}"
  )
endif()
set(ASRCAISim1_LIBRARIES ${ASRCAISim1_LIBRARY})

add_library(ASRCAISim1::All SHARED IMPORTED)
set_target_properties(ASRCAISim1::All PROPERTIES
  IMPORTED_LOCATION "${ASRCAISim1_LIBRARY}"
  INTERFACE_INCLUDE_DIRECTORIES "${ASRCAISim1_INCLUDE_DIRS}"
)
if(WIN32)
  set_target_properties(ASRCAISim1::All PROPERTIES
    IMPORTED_IMPLIB "${ASRCAISim1_LIBRARY}"
  )
endif()

#add third party dependency cmake paths
if(EXISTS ${PACKAGE_PREFIX_DIR}/thirdParty/thirdPartyConfigPath.cmake)
  include(${PACKAGE_PREFIX_DIR}/thirdParty/thirdPartyConfigPath.cmake)
endif()

#search installed core plugins
find_package(Python3 COMPONENTS Interpreter Development)
message(STATUS "Python3_EXECUTABLE:${Python3_EXECUTABLE}")
execute_process(
  COMMAND ${Python3_EXECUTABLE} "-m" "ASRCAISim1.scripts.find_core_plugins"
  COMMAND "tail" "-n1"
  OUTPUT_VARIABLE CORE_PLUGIN_DIRS
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
message(STATUS "CORE_PLUGIN_DIRS:${CORE_PLUGIN_DIRS}")
foreach(_PLUGIN_DIR ${CORE_PLUGIN_DIRS})
    get_filename_component(_PLUGIN_NAME ${_PLUGIN_DIR} NAME_WE)
    set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} ${_PLUGIN_DIR}/share/cmake)
    message(STATUS "Search ${_PLUGIN_DIR}/share/cmake")
    find_package(${_PLUGIN_NAME})
    if(${_PLUGIN_NAME}_FOUND)
      message(STATUS "${_PLUGIN_NAME} found.")
      add_library(ASRCAISim1::${_PLUGIN_NAME} SHARED IMPORTED)
      set_target_properties(ASRCAISim1::${_PLUGIN_NAME} PROPERTIES
          IMPORTED_LOCATION "${${_PLUGIN_NAME}_LIBRARY}"
          INTERFACE_LINK_LIBRARIES ${_PLUGIN_NAME}::All
      )
      if(WIN32)
        set_target_properties(ASRCAISim1::${_PLUGIN_NAME} PROPERTIES
          IMPORTED_IMPLIB "${${_PLUGIN_NAME}_LIBRARY}"
        )
      endif()
      list(APPEND ASRCAISim1_LIBRARIES ASRCAISim1::${_PLUGIN_NAME})

      set_target_properties(ASRCAISim1::All PROPERTIES
          INTERFACE_LINK_LIBRARIES ASRCAISim1::${_PLUGIN_NAME}
      )
    else()
      message(STATUS "${_PLUGIN_NAME} not found.")
    endif()
endforeach()

# ==============================================
# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
